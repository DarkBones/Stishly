<%= render partial: "edit_upcoming_transaction" %>

<div class="container hide-pagination">
  <div class="row">
    <div class="col-12">

    	<h2>Upcoming Transactions</h2>
    	<p>Transactions scheduled between now and <%= User.format_date(@date + 1.day, true) %></p>

    	<% if @transactions.length == 0 %>
    		<p>No transactions scheduled for now</p>
    	<% else %>
    		<table>
    			<th>Date</th>
    			<th>Schedule</th>
    			<th>Description</th>
    			<th>Amount</th>
    			<th></th>
	    		<%= render :partial => "upcoming_transactions_list", :collection => @transactions, :as => :transaction %>
	    	</table>
    	<% end %>

    </div>
  </div>
</div>

<script>
  function editUpcomingTransactionOccurrence(transactionId, scheduleId, schedulePeriod, scheduledTransactionId) {
    $("#edit_upcoming_transaction_form_fields").html("");
    $("#edit_upcoming_transaction_form #transaction_name").text("");
    $.ajax({
      type: "GET",
      dataType: "html",
      url: "/api/v1/forms/transactions/upcoming/edit_occurrence/" + transactionId.toString() + "/" + scheduleId.toString() + "/" + schedulePeriod.toString() + "/" + scheduledTransactionId.toString(),
      beforeSend() {
        insertAjaxSpinner($("#edit_upcoming_transaction_form_fields"));
      },
      success(data) {
        $("#edit_upcoming_transaction_form_fields").html(data);
        setDatepickers();
        addLadderformListeners();
        setTimezones();
        $.ajax({
          type: "GET",
          dataType: "json",
          url: "/api/v1/transactions/" + transactionId.toString(),
          success(data) {
            $("#edit_upcoming_transaction_form #transaction_name").text(data.description);
          }
        });
      }
    });
  }

  function editUpcomingTransactionSeries(transactionId) {
    $("#edit_upcoming_transaction_form_fields").html("");
    $("#edit_upcoming_transaction_form #transaction_name").text("");
    $.ajax({
      type: "GET",
      dataType: "html",
      url: "/api/v1/forms/transactions/upcoming/edit_series/" + transactionId.toString(),
      beforeSend() {
        insertAjaxSpinner($("#edit_upcoming_transaction_form_fields"));
      },
      success(data) {
        $("#edit_upcoming_transaction_form_fields").html(data);
        setDatepickers();
        addLadderformListeners();
        setTimezones();
        $.ajax({
          type: "GET",
          dataType: "json",
          url: "/api/v1/transactions/" + transactionId.toString(),
          success(data) {
            $("#edit_upcoming_transaction_form #transaction_name").text(data.description);
          }
        });
      }
    });
  }

  function cancelUpcomingTransaction(transactionId, scheduleId, schedulePeriod, tId) {
    $.ajax({
      type: "PUT",
      url: "/api/v1/transactions/" + transactionId.toString() + "/cancel_upcoming_occurrence/" + scheduleId.toString() + "/" + schedulePeriod.toString(),
      success(data) {
        triggerNotice("Transaction successfully cancelled", false);
        $("#transaction_" + tId.toString()).addClass("bg-danger");
      },
      error(e) {
        triggerNotice("Unable to cancel transaction", true);
      }
    });
  }

  function uncancelUpcomingTransaction(transactionId, scheduleId, schedulePeriod, tId) {
    $.ajax({
      type: "PUT",
      url: "/api/v1/transactions/" + transactionId.toString() + "/uncancel_upcoming_occurrence/" + scheduleId.toString() + "/" + schedulePeriod.toString(),
      success(data) {
        triggerNotice("Transaction no longer cancelled", false);
        $("#transaction_" + tId.toString()).addClass("bg-danger");
      },
      error(e) {
        triggerNotice("Unable to uncancel transaction", true);
      }
    });
  }

  function triggerUpcomingTransaction(transactionId, scheduleId, schedulePeriod) {
    $.ajax({
      type: "PUT",
      url: "/api/v1/transactions/" + transactionId.toString() + "/trigger_upcoming_occurrence/" + scheduleId.toString() + "/" + schedulePeriod.toString(),
      success(data) {
        triggerNotice("Transaction successfully triggered", false);
      },
      error(e) {
        triggerNotice("Unable to trigger transaction", true);
      }
    });
  }
</script>