ToggleCardForm('#transactionmenu');
ClearValues('#transactionmenu');

var active_account = '<%= @params[:active_account] %>';
var active_account_currency = '<%= Account.get_account_or_user_currency(@params[:active_account], current_user) %>';

<% @transactions_parent.reverse.each_with_index do |t, i| %>
  <% puts t.description + ": " + t.amount.to_s %>

  var t_account = "<%= @account_names[i] %>";
  var account_currency_amount = <%= t.account_currency_amount %>;

  // find all days shown in view
  var days = []
  $('#transactions_list div').each(function(index){
    if (typeof $(this).attr('id') !== "undefined"){
      days.push($(this).attr('id'));
    }
  });

  var t_date = '<%= t.local_datetime.to_s.split[0] %>'
  var $dayDiv = GetdayDiv(t_date, days);

  // insert the new transaction
  InsertTransaction($dayDiv, <%= t.time_num %>, <%= t.id %>);

  UpdateDayTotal($dayDiv, account_currency_amount);
<% end %>

UpdateAccountTotals();

function UpdateAccountTotals(){
  var amount;
  var account_id;
  var account_currency;
  var current_balance;
  var $balance
  <% @transaction_amounts_all.each_with_index do |a, i| %>
    amount = <%= a.to_i %>
    account_id = <%= @account_ids_all[i] %>

    $balance = $('#accounts_list #account_' + account_id + " span")
    current_balance = parseInt($balance.attr('balance'));
    account_currency = $balance.attr('currency');

    $.ajax({
      type: "GET",
      dataType: "json",
      url: "/api/account_display_balance/" + current_balance + "/" + account_currency + "/" + account_currency + "/" + amount,
      success: function(data) {
        $balance.attr('balance', current_balance + amount);
        $balance.html(data.html);
      }
    });
  <% end %>
}

function UpdateDayTotal($dayDiv, amount) {
  var new_total = parseInt($dayDiv.find("h3").attr("balance")) + amount;
  $dayDiv.find("h3").attr("balance", new_total)

  $.ajax({
    type: "GET",
    dataType: "json",
    url: "/api/account_display_balance/" + new_total.toString() + "/" + active_account_currency + "/" + active_account_currency + "/0",
    success: function(data) {
      $dayDiv.find("h3 span").html(data.html);
    }
  });
}

// inserts a transaction
function InsertTransaction($dayDiv, t_time, t_id) {
  var $entries = $dayDiv.find('ul li');

  if ($entries.length == 0 || t_time > parseInt($entries.eq(0).attr('class'))){
    GenerateTransaction($dayDiv.find('ul'), "prepend", t_id);
  } else if (t_time < parseInt($entries.eq($entries.length - 1).attr('class'))) {
    GenerateTransaction($dayDiv.find('ul'), "append", t_id);
  } else {
    for (var i = 0; i < $entries.length; i++) {
      if (t_time > parseInt($entries.eq(i).attr('class'))) {
        GenerateTransaction($entries.eq(i), "before", t_id);
        break;
      }
    }
  }
}

// generate transaction
function GenerateTransaction($target, type, t_id){
  $.ajax({
    type: "GET",
    dataType: "text",
    url: '/api/render_transaction/' + t_id.toString() + '/' + active_account,
    success: function(data) {
      switch (type) {
        case "prepend":
          $target.prepend(data);
          break;
        case "append":
          $target.append(data);
          break;
        case "before":
          $(data).insertBefore($target);
          break;
      }
    }
  });
}

// takes day and returns numeric value
// "2019-02-28" returns 20190228
function DayToNum(str) {
  var num = str.replace(/-/g, "");
  return parseInt(num);
}

// returns the correct list element for the transaction time
function GetdayDiv(t_date, days) {
  // get the day UL
  var $dayDiv = $('#' + t_date);

  // if no UL exists for the date, create one
  if ($dayDiv.length == 0) {
    CreateNewdayDiv(t_date, days)
    $dayDiv = $('#' + t_date);
  }

  return $dayDiv
}

// creates a new list element for transaction date
function CreateNewdayDiv(t_date, days) {
  var account_currency = '<%= Account.get_account_or_user_currency(@params[:active_account], current_user) %>';

  if (days.length == 0 || DayToNum(t_date) > DayToNum(days[0])) {
    // if no days exist in the ul, or the transaction is earlier than the earliest date, prepend a new one to #transactionslist
    GeneratedayDiv(t_date, $("#transactions_list"), "prepend", account_currency, 0);
  } else if (DayToNum(t_date) > DayToNum(days[days.length-1])) {
    // if the transaction date is between the first and last day on the page, iterate through the days to find the correct place
    for (var i = 0; i < days.length; i++) {
      if (DayToNum(t_date) > DayToNum(days[i])){
        GeneratedayDiv(t_date, $("#" + days[i]), "before", account_currency, 0);
        break;
      }
    }
  } else if ($('#transactions_list li').length % 30 != 0) { // TODO: Replace 30 with endless page system parameter
    // if the transaction is later than all days, put it on the end if there is room on the page (keep endless pagination in mind)
    GeneratedayDiv(t_date, $("#transactions_list"), "append", account_currency, 0);
  }
}

// generate a new list element via an ajax job
function GeneratedayDiv(date, $target, type, account_currency, amount) {
  $.ajax({
    type: "GET",
    dataType: "text",
    url: '/api/transaction_date_ul/' + date + '/' + amount.toString() + '/' + account_currency,
    success: function(data) {
      switch (type) {
        case "prepend":
          $target.prepend(data);
          break;
        case "append":
          $target.append(data);
          break;
        case "before":
          $(data).insertBefore($target);
          break;
      }
    }
  });
}