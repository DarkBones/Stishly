<div class="container">

  <div class="row">
    <div class="col-12">

      <div class="row">
        <div class="col-12">
          <h1 class="text-light text-center">Welcome</h1>
        </div>
      </div>

      <div class="row my-5 py-3 px-3">
        <div class="col-12">
          
          <%= form_tag("/users/submit_setup", id: "userwizzard")  do |f| %>

            <!-- progressbar -->
            <ul id="wizzard-progressbar">
              <li class="active"><span class="d-none d-sm-block">Country</span><span class="d-sm-none">&nbsp;</li>
              <li><span class="d-none d-sm-block">Accounts</span><span class="d-sm-none">&nbsp;</li>
              <li><span class="d-none d-sm-block">Income</span><span class="d-sm-none">&nbsp;</li>
              <li><span class="d-none d-sm-block">Expenses</span><span class="d-sm-none">&nbsp;</li>
            </ul>

            <!--fieldsets -->
            <!-- COUNTRY AND CURRENCY -->
            <fieldset class="rounded dropshadow bg-light py-2 px-2" id="setup_country">
              <h3>Country</h3>
              <h4>Select your country and preferred currency</h4>

              <div class="row">
                <div class="col-12 col-sm-9 col-lg-6 py-2">
                  <label>Country</label>
                  <%= country_select("user", "country", { include_blank: 'Select your country' }, { class: 'form-control', 'onchange' => 'changeUserCountry(this);', :autofocus => true }) %>
                </div>
                <div class="col-12 col-sm-3 col-lg-6 py-2">
                  <label>Base Currency</label>
                  <%= select_tag "user_currency", options_for_select(all_currencies(Money::Currency.table)), {:class => "form-control currency", :include_blank => true} %>
                  <%= hidden_field_tag :timezone, id: 'timezone_input' %>
                </div>
              </div>

              <input type="button" name="next" class="btn next action-button px-4 py-2 my-5 btn-rounded btn-secondary" value="Next"/><br />

            </fieldset>

            <!-- ACCOUNTS -->
            <fieldset class="rounded dropshadow bg-light py-2 px-2" id="setup_accounts">
              <h3 class="fs-title">Accounts</h3>
              <h4 class="fs-subtitle">Set up your accounts</h4>

              <div class="row">
                <div class="col-4 px-0 d-none d-md-block">
                  <label>Name</label>
                </div>
                <div class="col-3 px-0 d-none d-md-block">
                  <label>Balance</label>
                </div>
                <div class="col-2 px-0 d-none d-md-block">
                  <label>Currency</label>
                </div>
                <div class="col-3 px-0 d-none d-md-block">
                  <label>Type</label>
                </div>
              </div>

              <div id="account_rows">
                <%= render partial: "account_row" %>
              </div>

              <button type="button" class="btn btn-secondary btn-fieldset plusmin" data-toggle="tooltip" data-placement="top" title="Add additional account" onclick="insertAccountRow(); return false;">+</button>
              <button type="button" id="remove_account_row" class="btn btn-secondary disabled btn-fieldset plusmin"  data-toggle="tooltip" data-placement="top" title="Remove account" onclick="removeAccountRow();" style="right: 90px;">-</button>

              <input type="button" name="previous" class="btn previous action-button px-4 py-2 my-2 btn-rounded btn-secondary" value="Previous"/>
              <input type="button" name="next" class="btn next action-button px-4 py-2 my-5 btn-rounded btn-secondary" value="Next"/>

            </fieldset>

            <!-- INCOME -->
            <fieldset class="rounded dropshadow bg-light py-2 px-2">
              <h3 class="fs-title">Income</h3>
              <h4 class="fs-subtitle">Describe your income</h4>

              <div id="simple_schedule_form" class="ladderform">
                <div class="root">

                  <select name="regularity" class="form-control">
                    <option value="none" children="">I don't have an income</option>
                    <option value="regular" children=".path-regular">I get paid on regular intervals</option>
                    <option value="sporadic" children="">I get paid sporadically</option>
                  </select>

                  <div class="children py-2">
                    <div class="hidden path-regular" id="simplified_schedule_form">
                      <%= render partial: "schedules/simplified_form", :locals => {:type => "income", :id => "income"} %>
                    </div>
                  </div>

                </div>

              </div>

	            <input type="button" name="previous" class="btn previous action-button px-4 py-2 my-2 btn-rounded btn-secondary" value="Previous"/>
	            <input type="button" name="next" class="btn next action-button px-4 py-2 my-5 btn-rounded btn-secondary" value="Next"/>
            </fieldset>

            <!-- EXPENSES -->
            <fieldset class="rounded dropshadow bg-light py-2 px-2">
            	<h3>Expenses</h3>
            	<h4>Add your fixed expenses</h4>

            	<div id="expenseRows">
	            	<%#= render partial: "expense_row" %>
	            </div>

            	<button class="btn btn-secondary btn-fieldset plusmin" data-toggle="tooltip" data-placement="top" title="Add fixed expense" onclick="insertExpenseRow(); return false;">+</button>

            	<input type="button" name="previous" class="btn previous action-button px-4 py-2 my-2 btn-rounded btn-secondary" style="margin-top: 100px!important;" value="Previous"/><br />
            	<input type="submit" class="btn px-4 py-2 my-2 btn-rounded btn-primary" style="font-size: 1.5em;">
            </fieldset>

          <% end %>
        </div>
      </div>

    </div>
  </div>

</div>

<script>
  "use strict";

  var current_fs, next_fs, previous_fs;
  var left, opacity, scale;
  var animating;
  var currency = $("#user_currency").val();

  $(".account_row").first().find(".form-control").first().focus();

  function changeUserCountry(obj) {
    let $currencyTarget = $(obj).next();
    $.ajax({
      type: "GET",
      dataType: "json",
      url: "/api/v1/countries/" + $(obj).val() + "/currency",
      success(data) {
        if (!$("#user_currency").is("[changed]")) {
          currency = data.iso_code;
        }

        $("select.currency").each(function(){
          if (!$(this).is("[changed]")) {
            $(this).val(data.iso_code);
          }
        });
      }
    });
  }

  $("#user_currency").change(function(e){
    currency = $(e.target).val();
    $("select.currency").each(function(){
      if (!$(this).is("[changed]")) {
        $(this).val(currency);
        if($(this).attr("id").startsWith("account_currency_")) {
          editAccountSelect($(this));
        }
      }
    });
  });
  
  function insertExpenseRow(){
  	$.ajax({
      type: "GET",
      dataType: "json",
      url: "/api/v1/users/subscription",
      success(data) {
        if ($(".expenseRow").length < data.max_fixed_expenses || data.max_fixed_expenses < 0){
          $("#expenseRows").append("<%= j render :partial => 'expense_row' %>");
          $(".expenseRow").last().find(".currency").val(currency);
			  	numberExpenseRow();
			  	addLadderformListeners();
			  	populateAccountSelect();
          setDatepickers();
          setPopovers();
          setCurrencyListeners();
        } else {
          triggerNotice("Upgrade to permium for more fixed expenses", true);
        }
      }
    });
  }

  function populateAccountSelect(){
  	var values, texts, idx, value, $option;

  	$(".account_select").each(function(){
  		values = getAccountValues();

  		// remove options that are no longer there
  		while ($(this).children("option").length > values.length) {
  			$(this).find("option").last().remove();
  		}

  		// add options that are missing
  		while ($(this).children("option").length < values.length) {
  			$(this).append("<option value=\"\"></option>");
  		}

  		// populate the options
  		value = values.pop();
  		idx = values.length;
  		while (value) {
  			$option = $(this).find("option:eq(" + idx.toString() + ")");
  			$option.attr("value", value.name);
  			$option.text(getAccountOptionText(value));

  			value = values.pop();
  			idx -= 1;
  		}

  	});
  }

  function getAccountOptionText(value){
  	return value.name.toString() + " (" + value.currency.toString() + ")";
  }

  function getAccountValues(){
  	var values = [];
  	$(".account_row").each(function(){
  		values.push({
  			"name": $(this).find(".account_name").val(),
  			"currency": $(this).find(".account_currency").val()
  		});
  	});
  	return values;
  }

  function editAccountSelect(e){
  	var nameArr, idx, accountName, currency, rowcount, $option;

  	nameArr = $(e).attr("name").split("_");
  	idx = parseInt(nameArr[nameArr.length - 1], 10);

  	rowcount = $(".account_row").length;

  	accountName = $(e).parents(".account_row").find(".account_name").val();
  	currency = $(e).parents(".account_row").find(".account_currency").val();
  	
  	$(".account_select").each(function(){
  		if ($(this).children("option").length < rowcount) {
  			$(this).append("<option value=\"\"></option>");
  		} else if ($(this).children("option").length > rowcount) {
  			$(this).find("option").last().remove();
  		}

  		$option = $(this).find("option:eq(" + idx.toString() + ")");
  		$option.text(accountName.toString() + " (" + currency + ")");
  		$option.attr("value", accountName.toString());
  	});
  }

  function numberExpenseRow() {
  	var num = $(".simple_schedule_form").length - 1;
  	var row = $(".simple_schedule_form").last();

  	row.find("[name]").each(function(){
  		$(this).attr("name", $(this).attr("name") + "_" + num.toString());
  	});
  	row.find("[id]").each(function(){
  		$(this).attr("id", $(this).attr("id") + "_" + num.toString());
  	});
  }

  function removeExpenseRow(e) {
  	$(e).parent().remove();
  }

  function numberAccountRow(){
  	var num = $(".account_row").length - 1;
  	var row = $(".account_row").last();
  	
  	row.find(".form-control").each(function(){
  		$(this).attr("name", $(this).attr("name") + num.toString());
      $(this).attr("id", $(this).attr("id") + num.toString());
  	});
  }

  function setAccountPlaceholder(){
  	var num = $(".account_row").length - 1;
  	var row = $(".account_row").last().find(".form-control").first();
  	var placeholders = ["Current Account", "Cash", "Savings Account"];

  	if (num < placeholders.length){
  		row.attr("placeholder", placeholders[num]);
  	}
  }

  function insertAccountRow() {
    $.ajax({
      type: "GET",
      dataType: "json",
      url: "/api/v1/users/subscription",
      success(data) {
        if ($(".account_row").length < data.max_accounts || data.max_accounts < 0){
          $("#account_rows").append("<%= j render :partial => 'account_row' %>");
          $("#remove_account_row").removeClass("disabled");
          numberAccountRow();
          setAccountPlaceholder();
          setCurrencyListeners();
          $(".account_row").last().find(".form-control").first().focus();
          $(".account_row").last().find(".currency").val(currency);
          editAccountType($(".account_row").last().find(".account_type"), false);
        } else {
          triggerNotice("Upgrade to permium for more accounts", true);
        }
      }
    });
  }

  function editAccountType(obj, showNotice=true) {
    if ($(obj).val() !== "spend") {
      return;
    }

    // count the spending accounts
    let spendingAccounts = 0;
    $(".account_type").each(function(){
      if($(this).val() === "spend") {
        spendingAccounts += 1;
      }
    });

    // check if it exceeds the maximum allowed
    $.ajax({
      type: "GET",
      dataType: "json",
      url: "/api/v1/users/subscription",
      success(data) {
        if(spendingAccounts > data.max_spending_accounts) {
          if(showNotice){
            triggerNotice("Upgrade to permium for spending accounts", true);
          }
          $(obj).val("save");
        }
      }
    });
  }

  function removeAccountRow() {
    if ($(".account_row").length > 1) {
      $(".account_row").last().remove();
    }
    
    if ($(".account_row").length === 1) {
      $("#remove_account_row").addClass("disabled");
    }

    populateAccountSelect();

  }

  function validateCountry(fs){
    var valid = true;

    // get the country value
    if($("#user_country").val().length === 0) {
      triggerNotice("No country selected", true);
      return false
    }

    if($("#user_currency").val().length === 0) {
      triggerNotice("No currency selected", true);
      return false;
    }

    return true;

  }

  function validateAccounts(fs){
  	var valid = true;

  	// get the account names
  	var names = [];
  	var accountCount = 0;
  	fs.find(".account_name").each(function(){
  		names.push($(this).val());
  		if($(this).val().length > 0){
  			accountCount += 1;
  		}
  	});

  	// check if any accounts have been filled in
  	if (accountCount === 0) {
  		triggerNotice("Create at least one account", true);
  		valid = false;
  		return false;
  	}

  	// check if any names are empty
  	names.forEach(function(n){
  		if(n.length === 0) {
  			triggerNotice("Fill in a name for each account", true);
  			valid = false;
  			return false;
  		}
  	});

  	// check for special characters
  	names.forEach(function(e){
  		if (/[-\._~:\/\?#\[\]@!\$&'\(\)\*\+,;={}"]/.test(e)) {
  			triggerNotice("Special characters are not allowed in account names", true);
  			valid = false;
  			return false;
  		}
  	});

  	// check for duplicates
  	var values = []
  	names.forEach(function(e){
  		if (values.includes(e)) {
  			triggerNotice("No duplicate account names allowed", true);
  			valid = false;
  			return false;
  		}
  		values.push(e);
  	});

    // check if there is at least one spending account
    var spendingAccounts = 0
    fs.find(".account_type").each(function() {
      if ($(this).val() == "spend") {
        spendingAccounts += 1;
      }
    });
    if (spendingAccounts == 0) {
      triggerNotice("Create at least one spending account", true);
      valid = false;
      return false;
    }

  	return valid;
  }

  $(".next").click(function(){
    if (animating) return false;

    // form validation
    if ($(this).parent().attr("id") === "setup_accounts") {
    	if(!validateAccounts($(this).parent())) {
    		return;
    	}
    }

    if ($(this).parent().attr("id") === "setup_country") {
      if(!validateCountry($(this).parent())) {
        return;
      }
    }


    animating = true;
    current_fs = $(this).parent();
    next_fs = $(this).parent().next();
    // progress the progressbar
    $("#wizzard-progressbar li").eq($("fieldset").index(next_fs)).addClass("active");
    // show the next fieldset
    next_fs.show();
    // hide the current fieldset
    current_fs.animate({opacity: 0}, {
      step: function(now, mx) {
        scale = 1 - (1 - now) * 0.2;
        //left = (now * 50) + "%";
        opacity = 1 - now;
        current_fs.css({
          'transform': 'scale('+scale+')',
          'position': 'absolute'
        });
        next_fs.css({'opacity': opacity});
      },
      duration: 800,
      complete: function(){
        current_fs.hide();
        animating = false;
      },
      easing: 'easeInOutBack'
    })
  });
  $(".previous").click(function(){
    if(animating) return false;
    animating = true;
    current_fs = $(this).parent();
    previous_fs = $(this).parent().prev();
    $("#wizzard-progressbar li").eq($("fieldset").index(current_fs)).removeClass("active");
    previous_fs.show();
    current_fs.animate({opacity: 0}, {
      step: function(now, mx) {
        scale = 0.8 + (1 - now) * 0.2;
        //left = ((1 - now) * 50)+"%";
        opacity = 1 - now;
        current_fs.css({'left': left});
        previous_fs.css({'transform': 'scale('+scale+')', 'opacity': opacity});
      },
      duration: 800,
      complete: function() {
        current_fs.hide();
        animating = false;
      },
      easing: 'easeInOutBack'
    })
  });

  numberAccountRow();
  setAccountPlaceholder();
  setCurrencyListeners();

</script>
